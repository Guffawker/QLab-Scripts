--This cue was created by Johnny Bartlett! If you are having any issues with it, please let me know over at https://github.com/Guffawker/QLab-Scripts and I'll do my best to help resolve the issues! You can also find my other scripts there or donate over at https://www.buymeacoffee.com/guffawker to support me!
--The two OSC commands used to query the ETC console for the cues to create
set getCueCount to "/eos/get/cue/"
set getCueInfo to "/eos/get/cue/1/index/"


tell application id "com.figure53.QLab.4" to tell front workspace
	--Variables used to track the cues created and data through the script
	set saveData to {}
	set createdCues to {}
	set createdCueTracker to {}
	--Checks the notes section of the cue for saved information
	my getSavedInfo(saveData)
	set infoNeeded to item 1 of saveData
	set consoleIP to item 2 of saveData
	set oscRXPort to item 3 of saveData
	set oscTXPort to item 4 of saveData
	set networkPatch to item 5 of saveData
	set brewDirectory to item 6 of saveData
	set delayTime to item 7 of saveData
	set dependenciesInstalled to item 8 of saveData
	set cueList to "1"
	set donationPrompt to false
	
	
	--Displays prompts to the user to get the necessary information to query the ETC board and create the cues
	if infoNeeded is true then
		set consoleIP to display dialog "ETC console IP Address:" default answer consoleIP
		set consoleIP to text returned of consoleIP
		set oscRXPort to display dialog "ETC OSC RX Port:" default answer oscRXPort
		set oscRXPort to text returned of oscRXPort
		set oscTXPort to display dialog "ETC OSC TX Port:" default answer oscTXPort
		set oscTXPort to text returned of oscTXPort
		set networkPatch to choose from list {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} with prompt "QLab Network Path to Lights:"
		set cueList to display dialog "ETC Cue List Number:" default answer cueList
		set cueList to text returned of cueList
		
		--Pormpts the user to install any necessary dependencies required to run the script
		if dependenciesInstalled is false then
			set donationPrompt to true
			set installDependencis to display alert "PLEASE ENSURE YOU HAVE DONE YOUR DUE DILIGENCE TO MAKE SURE THIS SCRIPT HASN'T BEN ALTERED TO INSTALL ANYTHING MALICIOUS ON YOUR COMPUTER! ONLY THE LISTED DEPENDENCIES SHOULD INSTALL, AND THE TERMINAL WINDOW WILL SPELL OUT WHAT IT IS INSTALLING AT EACH STEP!" & return & "Would you like to install any necessary dependencies before running the script. You may already have some of these installed. Selecting Yes should reinstall the rest without interfering with existing installations. These include the following:" & return & "Command Line Tools for Xcode" & return & "homebrew" & return & "swig" & return & "openSSL" & return & "python" & return & "liblo" & return & "osc" & return & "A terminal will launch to install each of the dependencies required. The first one (homebrew) will require an administrative password. If you already have it installed, you can simply press Ctrl + C to terminate the install and move on to the next ones. Follow any prompts by the terminal to ensure the install of each dependency!" & return & "This will be the only time this prompt is show. If you need to install dependencies later, change the color tag of this cue to none to be repormpted." buttons {"No", "Yes"}
			set installchoice to button returned of installDependencis
			if installchoice is equal to "Yes" then
				my installDependencies(brewDirectory)
			end if
			set q color of cue "GETCUES" to "Purple"
		end if
		
		--Saves the inputed information to the notes of the cue for reference in future runs
		set notes of cue "GETCUES" to "You can change this cues color to Blue to bypass any prompts and just use the information saved in the Notes. Bypassing input will always use a default cue list of 1." & return & "ETC IP Address: " & consoleIP & return & "ETC OSC RX Port: " & oscRXPort & return & "ETC OSC TX Port: " & oscTXPort & return & "QLab Network Patch to Lights: " & networkPatch & return & "This script was created by Johhny Bartlett. To see more of my work, donate to allow me to create more scripts like this, or commission a script for your space or show visit https://github.com/Guffawker/QLab-Scripts or visit https://www.buymeacoffee.com/guffawker to donate directly!"
	end if
	
	set etcSendInfo to consoleIP & " " & oscRXPort
	
	--Makes sure there isn't currently a file on the desktop that matches the temporary dump file that will be created to parse the received data
	try
		do shell script "rm ~/Desktop/osc.txt"
	end try
	--Opens the OSCDump port using the provided TX port, to listen to the consoles replies
	my oscListen(oscTXPort, brewDirectory)
	delay delayTime
	
	--Uses oscsend to query the ETC console at the IP address and port given, to get a count of all cues in the requested cue list
	do shell script brewDirectory & "/oscsend " & etcSendInfo & " " & getCueCount & cueList & "/count"
	delay delayTime
	set returnedCount to do shell script "cat " & "~/Desktop/osc.txt"
	set AppleScript's text item delimiters to " "
	set cueCountInfo to text items of returnedCount
	set cueCount to item 4 of cueCountInfo
	
	--Uses the aquired cue count value to send a command for each cue to get the cue number and other information from the console	
	set cueCheck to 0
	repeat cueCount times
		do shell script brewDirectory & "/oscsend " & etcSendInfo & " " & getCueInfo & cueCheck
		set cueCheck to cueCheck + 1
		delay delayTime
	end repeat
	copy ("count i " & cueCount) to end of createdCueTracker
	set rawCueList to do shell script "cat " & "~/Desktop/osc.txt"
	set rawCueList to paragraphs of rawCueList
	
	--Parses all the data received from the OSC replies, and creates a network cue for each one with the osc command to target proper cue
	repeat with consoleReply in rawCueList
		set AppleScript's text item delimiters to "/eos/out/get/cue/" & cueList & "/"
		set cueNumber to text item 2 of consoleReply
		set AppleScript's text item delimiters to "/"
		set newCueInfo to text item 1 of cueNumber
		if createdCueTracker does not contain newCueInfo then
			make type "Network"
			set theNewCue to last item of (selected as list)
			set q number of theNewCue to newCueInfo
			set q name of theNewCue to "Lighting Cue: " & newCueInfo
			set custom message of theNewCue to "/eos/cue/" & newCueInfo & "/fire"
			set patch of theNewCue to networkPatch
			copy theNewCue to end of createdCues
			copy newCueInfo to end of createdCueTracker
		end if
	end repeat
	
	--Begs for money. Please support if you can. I'm broke, and these tools take time to create.	
	if donationPrompt is true then
		set donatePrompt to display alert "This script was created by Johhny Bartlett. To see more of my work, donate to allow me to create more scripts like this, or commission a script for your space or show visit https://github.com/Guffawker/QLab-Scripts or click the Donate button below to support me direct! (This prompt will only ever show up while installing dependencies. If you reset the cue you will see it again, but don't worry it won't be a forced pop-up every time you run this script!)" buttons {"Thanks!", "Donate"}
		set response to button returned of the donatePrompt
		if response is "Donate" then open location "https://www.buymeacoffee.com/guffawker"
	end if
	--Creates a group and adds all of the newly created cues to it, so they can easily be relocated or condensed.
	make type "Group"
	set etcCueGroup to last item of (selected as list)
	set q name of etcCueGroup to "ETC Lighting Cues"
	tell current cue list
		repeat with lightCue in createdCues
			move cue id (uniqueID of lightCue) of parent of lightCue to etcCueGroup
		end repeat
	end tell
	
	--Cleans up by killing the terminal and deleting the temporary dump file.
	do shell script "kill -9 $(pgrep Terminal)"
	do shell script "rm ~/Desktop/osc.txt"
	--Promts the user to let them know how many cues the board reported and how many got created so the user can know if there were any descrepencies.
	display dialog cueCount & " Cues were reported by the light board, " & ((count createdCueTracker) - 1) & " cues were created by QLab. If these numbers don't match, please review your cue list for any discrepencies!"
end tell

--The function that creates the OSCDump port
on oscListen(oscTXPort, brewDirectory)
	tell application "Terminal"
		activate
		do script brewDirectory & "/oscdump -L " & oscTXPort & " >> ~/desktop/osc.txt"
	end tell
end oscListen


--The function that pulls all of the cue information to get any saved data or run conditions.
on getSavedInfo(saveData)
	tell application id "com.figure53.QLab.4" to tell front workspace
		set thisCue to last item of (active cues as list)
		if q number of thisCue is not equal to "GETCUES" then
			set q number of thisCue to "GETCUES"
			set q name of thisCue to "ETC Cue Sync"
			set q color of cue "GETCUES" to "None"
		end if
		
		if q color of cue "GETCUES" is not equal to "Blue" then
			set infoNeeded to true
		else
			set infoNeeded to false
		end if
		set AppleScript's text item delimiters to ": "
		set cueNotes to notes of cue "GETCUES"
		set savedInfo to count of paragraphs of cueNotes
		if savedInfo is less than 6 then
			set infoNeeded to true
			set consoleIP to ""
			set oscRXPort to ""
			set oscTXPort to ""
			set networkPatch to ""
			set brewDirectory to ""
			set post wait of cue "GETCUES" to 0.02
			set delayTime to post wait of cue "GETCUES"
		else
			set consoleIP to text item 2 of (paragraph 2 of cueNotes)
			set oscRXPort to text item 2 of (paragraph 3 of cueNotes)
			set oscTXPort to text item 2 of (paragraph 4 of cueNotes)
			set networkPatch to text item 2 of (paragraph 5 of cueNotes)
			set delayTime to post wait of cue "GETCUES"
		end if
		set AppleScript's text item delimiters to " "
		set chip to (do shell script "sysctl -n machdep.cpu.brand_string")
		if text item 1 of chip is "Apple" then
			set brewDirectory to "/opt/homebrew/bin/"
		else
			set brewDirectory to "/usr/local/bin"
		end if
		if q color of cue "GETCUES" is equal to "Purple" or q color of cue "GETCUES" is equal to "Blue" then
			set dependenciesInstalled to true
		else
			set dependenciesInstalled to false
		end if
		copy infoNeeded to end of saveData
		copy consoleIP to end of saveData
		copy oscRXPort to end of saveData
		copy oscTXPort to end of saveData
		copy networkPatch to end of saveData
		copy brewDirectory to end of saveData
		copy delayTime to end of saveData
		copy dependenciesInstalled to end of saveData
	end tell
	return saveData
end getSavedInfo

--The function to install all of the necessary dependencies to run the script.
on installDependencies(brewDirectory)
	tell application "Terminal"
		activate
		set installs to do script "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script "xcode-select --install" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script brewDirectory & "/brew install python" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script brewDirectory & "/brew install swig" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script brewDirectory & "/brew install openssl" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script brewDirectory & "/brew install liblo" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		do script brewDirectory & "/brew install osc" in installs
		repeat
			delay 0.1
			if not busy of installs then exit repeat
		end repeat
		quit
	end tell
end installDependencies
